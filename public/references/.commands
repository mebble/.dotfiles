# database # db

## sqlite
.tables
.help
.schema sqlite_schema
.schema sqlite_master
.mode column
.headers on
select * from sqlite_schema;
select * from sqlite_master;

## mongodb
show dbs
show collections
db.<collection>.find()
db.getMongo()
db.adminCommand({ listDatabases: 1 })
db.runCommand({ listCollections: 1 })
db.runCommand({ listIndexes: "<collection>" })

# java

## sdkman (https://sdkman.io/usage)

sdk list
sdk list java
sdk list gradle
sdk list kotlin
sdk list leiningen

sdk use java 8.0.342-amzn
sdk use java 11.0.15-tem
sdk use java 17.0.1-tem
sdk use java 18.0.1-tem

## jar

jar -c -v -f output.jar -e EntryPoint EntryPoint.class some_dir/*.class
java -jar output.jar
jar -t -f output.jar

# clojure
clojure -Spath -Sdeps '{:deps {org.clojure/math.combinatorics {:mvn/version "0.2.0"}}}' | tr ':' '\n'

## babashka
bb --classpath "$(clojure -Spath -Sdeps '{:deps {org.clojure/math.combinatorics {:mvn/version "0.2.0"}}}')" <script>

# python
pip3 list
python3 -m venv
python3 -m venv env

# Homebrew Mac
brew services list
brew services start grafana
brew services start postgresql@15
brew services info grafana
brew services info postgresql@15

# zip archives
tar --list --file <zipfile>
tar --extract --verbose --file <zipfile>
tar -xvf <zipfile>
tar --create --gzip --verbose --file <zipfile> <pathtozip>
tar -czvf <zipfile> <pathtozip>

# git
git push origin main~1:main # push only upto parent commit
git remote rename origin upstream
git branch -vv
git branch master -u origin/master # similar to --set-upstream
git commit --amend --no-edit
git commit --amend -m

# ssh
## list keys added to ssh agent
ssh-add -l
ssh-add -l -E sha256
## add key to ssh agent
ssh-add ~/.ssh/github_key
## test ssh connection to host
ssh -vT git@github.com

# misc
seq 5 | xargs -t -n 1
seq 5 | xargs -t -n 1 -P 2
seq 5 | xargs -t -n 1 -P 2 bash -c 'echo $0; sleep 1'
seq -s ', ' 5 | xargs -I {} echo [{}]
seq 1 10 | xargs -I {} echo {}.text
seq 16 | xargs -I {} bash -c 'tput setaf {} && echo hi'
seq 16 | xargs -I {} bash -c 'tput setab {} && echo hi'
tput sgr0 # reset

# info
curl wttr.in
curl cht.sh
curl cheat.sh

# files folders
find . -type f -name '*.txt'
find . -type d
find <dir> -name "<pattern>"

watch ls -l
watch tree

du -s -h node_modules
du -d 1 -h node_modules

df -h
df -hi

ls -1 | grep .txt
ls -1 | wc -l
ls -1 -i

ls | xargs ls
ls | xargs -n 1

## renaming file extension
ls -1 | xargs -I {} basename {} .txt | xargs -I {} echo 'Dry run: mv {}.txt {}.md'
ls -1 | xargs -I {} basename {} .txt | xargs -I {} mv {}.txt {}.md
ls -1 | awk -F "." '{ if ($2 == "txt") print $1 }' | xargs -I {} echo 'Dry run: mv {}.txt {}.md'
ls -1 | awk -F "." '{ if ($2 == "txt") print $1 }' | xargs -I {} mv {}.txt {}.md
ls -1 | grep .txt | cut -d. -f1 | xargs -I {} echo 'Dry run: mv {}.txt {}.md'
ls -1 | grep .txt | cut -d. -f1 | xargs -I {} mv {}.txt {}.md

wc -l [file]

chown root:root [file]
chmod 755 [file]
chmod 644 [file]
chmod +x [file]
chmod -x [file]
chmod u+x [file]
chmod g+x [file]
chmod o+x [file]
chmod ug+x [file]

## ssh
scp -i ~/.ssh/pub_key -r ./path/to/src user@host:~/path/to/dest
scp -i ~/.ssh/pub_key -r user@host:~/path/to/src ./path/to/dest

# shortcuts history
!!         # resolves to the most recent entry in "history"
!x         # where x is a number from the output of "history"
!some-cmd  # resolves to the most recent history entry that matches "some-cmd"
y          # outputs yyyyyyyy to stdout

# text processing # formatting
env | column -t -s '='

printf 'hehe\nhaha\n' | sed 's/h/y/'
printf 'one\ntwo\n\nthree\n' | sed '/^$/d'
echo 'hi how are you' | sed 's/[a-z]/\U&/g'
echo $PATH | sed -E 's/:/\n/g'
echo $PATH | tr ':' '\n'
sed -i 's/ *$//' [file]
sed -i 's/[[:space:]]*$//' [file]

printf "one\ntwo\nthree\n" | awk 'BEGIN { print "Numbers:" } { print }'
echo "abc      def" | awk '{ print $2 }'
echo "   abc     def" | awk '{ print $2 }'
ps | awk '{print $1, $4}'
ps -ef | awk '{ if ($6 != "?" && $6 != "??") print $0 }'
cat /etc/shadow | column -t -s ':'
cat /etc/passwd | column -t -s ':'
cat /etc/passwd | awk -F ':' '{print $1}'
cat /etc/passwd | awk -F ':' '{print $1"\t"$6"\t"$7}'
cat /etc/passwd | awk 'BEGIN {FS=":"; OFS="\t"} {print $1, $6, $7}'
cat /etc/shells | awk -F "/" '/^\// {print $NF}' | uniq

echo "abc      def" | cut -d ' ' -f 1
echo "abc      def" | cut -d ' ' -f 7
printf 'this is a line of text\nthis is the second line' | cut -c 1-10
printf 'this is a line of text\nthis is the second line' | cut -c 11-
cat /etc/passwd | cut -d ':' -f 1

echo 'this is a line of text' | tr 'aeiou' 'AEIOU'
echo 'this is a line of text' | tr 'aeiou' 'AEI'
echo 'this is a line of text' | tr -d 'aeiou'
echo 'this is a line of text' | tr -d 'aeiou '
echo 'this is a line of text' | tr -cd 'aeiou\n'
echo 'this is a line of teeeext yoooo' | tr -s 'aeiou '
echo 'this is a line of text' | tr '[:lower:]' '[:upper:]'
head 1 /dev/urandom | tr -cd '[:print:]\n'
echo 'l33t sp3ck' | tr -cd '[:digit:]\n'

## logs
tail -f /var/log/dmesg
tail -f /var/log/syslog
tail -f /var/log/user.log
tail -f /var/log/daemon.log
tail -f /var/log/auth.log
tail -f /var/log/auth.log | grep -e sshd

# system information
uname -a
uname -r
uname -m

hostname
hostname -I
hostname -f

uptime -p

man man
man 1 printf
man 3 printf
man -a printf
whatis grep
apropos -s 1 .
apropos -s 2 .
apropos -s 3 .

# networking

## dns
nslookup example.com
nslookup -type=ns example.com
nslookup -type=txt example.com
nslookup -type=cname example.com
nslookup example.com <nameserver>
nslookup example.com 1.1.1.1
nslookup example.com 8.8.8.8
dig example.com
dig example.com txt
dig example.com ns
dig example.com cname
dig @<nameserver> example.com
dig @<nameserver> example.com cname
dig @<nameserver> example.com ns

## tcp udp sockets
### netcat
nc -l 3000 # listen
nc localhost 3000 # connect
### See processes and ports used
netstat
netstat --tcp
netstat --program
netstat --listening
netstat --tcp --numeric

## process at a port
### mac
lsof -i :54321

## configs
ifconfig | grep en0 -A 5
ifconfig | grep 'en\d' -A 5
ifconfig | grep 'utun\d' -A 5
ifconfig | grep ipsec0 -A 5

## misc
ping <host>
traceroute <host>
curl ipinfo.io

# strace

strace -h
strace -y ls
strace -p <PID>
strace -s 1000 -e trace=read,write,writev <some-http-server>

strace ls
strace ping -c 5 google.com
strace curl example.com
strace dig example.com

## Grep for certain system calls
strace -e execve ls
strace -e openat ls
strace -e read ls
strace -e write ls
strace -e mmap2 ls
strace -e socket ping google.com
strace -e socket -y curl example.com
strace -e connect curl example.com

### Multiple matches
strace -e trace=read,write node -e "console.log('hello');"
strace -e trace=read,write,writev -p 377
strace -e trace=read,write,writev -p 377
strace -e trace=open google-chrome

## Redirect to stdout so that we can pipe (https://unix.stackexchange.com/a/48225)
strace ls 2>&1 | grep ENOENT
strace ls 2>&1 | grep EACCES

## Show strace of subprocesses:
strace -f ./sirup/sirup sum --repos .
strace -f -e execve ./sirup/sirup sum --repos .

## System call manpages
man 2 open
man 2 writev
man 2 clock_gettime

# processes
pstree
ps              # What's running in the current terminal
ps -u $(whoami) # All processes running for my user account
ps --help
ps --help simple
ps --help list
ps aux # https://unix.stackexchange.com/questions/106847/what-does-aux-mean-in-ps-aux
ps aux | fzf
ps -au
ps -aux
ps -aux | grep teatime
ps -ef                            # all processes, formatted
ps -ef | { head -1; grep lein; }  # with header row included (https://stackoverflow.com/questions/12920317/include-header-in-the-grep-result)
ps -p pid1,pid2                   # certain PIDs
nohup [cmd]  # https://askubuntu.com/a/723048

## Show processes sorted by CPU usage
top
htop

## proc filesystem
ls -l /proc/self/fd
cat /proc/self/cmdline
ls -l /proc/[PID]/fd
cat /proc/[PID]/cmdline
ls -l /dev | grep std

## Based on process name
pgrep systemd
pgrep ssh-agent
pgrep node
pgrep postgres

## Background & Foreground
jobs # Show processes of the current shell only
### Example output:
```
[1]+  Stopped                 ping -c 100 www.google.com
[2]-  Done                    ping -c 100 nleeson.nl
[3]-  Running                 sleep 900 &
[4]-  Killed                  ping -c 100 google.com
```

ping -c 100 www.google.com & # Run a command and make it a background process
bg <job-num> # Resume a stopped process (SIGSTOP'd) as a background process (output will be to terminal, but you won't be able to send it signal now using keyboard ctrl+c etc. Have to "kill" from separate terminal only)
fg <job-num> # Resume a stopped process (SIGSTOP'd) as a foreground process (now you'll be able to send it signal again using keyboard ctrl+c etc)
bg %<job-num> # zsh
fg %<job-num> # zsh

## daemon
systemctl list-units -t service
systemctl list-units -t target
systemctl list-units -t mount
systemctl list-units -t path
systemctl list-units -t scope
systemctl list-units -t device
systemctl list-units -t socket
systemctl list-units -t timer

systemctl list-units --all | grep inactive
systemctl list-unit-files

systemctl status teatime # (defaults to systemctl status teatime.service)
systemctl status multi-user.target
systemctl restart teatime
systemctl reload teatime
systemctl disable teatime
systemctl enable teatime
systemctl is-active sshd
systemctl is-enabled sshd

systemctl cat teatime
systemctl cat multi-user.target

systemctl get-default

systemctl list-dependencies
systemctl list-dependencies teatime
systemctl list-dependencies multi-user.target

### logs
journalctl -xe
journalctl -u teatime

## signals
kill -l
kill <PID> # defaults to kill -SIGTERM <PID> or kill -15 <PID>
kill -SIGTERM <PID>
kill -SIGKILL <PID>
kill -SIGINT <PID>  # same as ctrl+c
kill -SIGSTOP <PID> # same as ctrl+z
kill -SIGCONT <PID> # same as bg <job-num>

# vim

ls # show buffers
help
help vimrc-intro
help user-manual
vert help
!
!ls
e <file>
r filename
r !<command>
r !pwd
w
w filename
wa
<visual-mode> w filename
clo
q
q!
qa
Ex
@:
noh
<insert mode><C-r>=system('ls')
echo @"

## While in netrw
d - create directory
% - create file

## Windows
vsp
sp

## Show Commands
:<up>
:!<command>
:TAB
:C-d
messages
q:
q:p # paste to command history for execution

## Search
/
/PATTERN\c
?PATTERN

## Registers
reg
reg " 0 1 - : / * +

### redirect value of rtp to a register
redir @a
echo 'hello'
redir END

## Marks
marks
marks '.

## Substitute
s/PATTERN/NEW_PATTERN
s/PATTERN/NEW_PATTERN/g
<num>,<num>s/PATTERN/NEW_PATTERN
,<num>s/PATTERN/NEW_PATTERN
,+<num>s/PATTERN/NEW_PATTERN
,-<num>s/PATTERN/NEW_PATTERN
%s/PATTERN/NEW_PATTERN
%s/PATTERN/\1\2\3
%s/PATTERN/NEW&PATTERN
s/pattern/newpattern

### Wrap pattern in parens
s/sunny/(&)/
### Replace with newline
s/<char>/\r

### Append to line
s/$/pattern
s/$/,
### Prepend to beginning of line
s/^/pattern
### Replace within visual range, not entire line (https://vi.stackexchange.com/a/1926/49558)
s/\%VSEARCH/REPLACE/g
### Remove trailing semicolons
%s/;$//

### One-eyed kirby
https://vonheikemen.github.io/devlog/tools/how-to-survive-without-multiple-cursors-in-vim/#fighting-kirby

#### Repeat with hyphen
s/\(.*\)/\1-\1
#### Change single quote to double quote
s/'\(.*\)'/"\1"
#### Wrap first word in quotes
s/\(\w*\)/"\1"
#### Remove quotes from JSON keys
%s/"\(.*\)":/\1:
#### Wrap keys of js object in quotes
s/\(\w*\):/"\1":

## g command
g/PATTERN/<cmd>
g/PATTERN/d
### search within selection
:'<,'>g/PATTERN

### Delete all empty lines
:g/^\s*$/d

## formatting
%!xargs  # put all lines in one line (issue: this removes quotes)

### json
%!jq
%!jq -S
%!jq --indent 4

### clojure
%!jet

## options
set buftype=nofile
set filetype=clojure
set ignorecase
set ic
set noignorecase
set noic
set hlsearch
set hls
set nohlsearch
set nohls
set incsearch
set is
set noincsearch
set nois
set wrap
set wrap!
set nowrap

### Line numbers
set number
set number!
set nu
set nu!
set nonumber
set nonu
set relativenumber
set relativenumber!
set rnu
set rnu!
set norelativenumber
set nornu

# neovim
term
!rg <pattern> <path> --vimgrep
source %
so
checkhealth

TSInstall <lang>
TSPlaygroundToggle
Mason
Lazy
Lazy load <plugin>

help lsp
help lspconfig-all
help nvim_get_keymap
help vim.keymap.set
help vim.lsp.buf

VMDebug
LspInfo
LspStop
LspStart

lua x = 12
lua vim.diagnostic.goto_next()
lua vim.lsp.buf.rename()
lua vim.lsp.buf.code_action()
lua =vim.api
lua =vim.lsp.get_active_clients()
lua =vim.inspect({})
lua =package.loaded
lua =package.loaded['<module>']
lua package.loaded['<module>'] = nil
lua require("...")

Telescope
Telescope diagnostics
Telescope buffers
Telescope keymaps
Telescope help_tags
Telescope commands
Telescope command_history
Telescope grep_string search=<term>
Telescope find_files cwd=<path>
Telescope highlights
Telescope file_browser
Telescope autocommands

echo mapleader
echo maplocalleader
echo &rtp
nmap K
nmap <leader>
nmap <C-d>
nmap N
imap kj
vmap kj

# file changes

watchexec node app.js # alternative: entr (https://news.ycombinator.com/item?id=30740181)
watchexec --restart node app.js
watchexec --restart --stop-signal=SIGINT node app.js

# Binary
- [bin-dec-dex converter](https://www.rapidtables.com/convert/number/ascii-hex-bin-dec-converter.html)
- [list of file signatures](https://en.wikipedia.org/wiki/List_of_file_signatures)

hexdump -C [file]
xxd [file]
xxd [file] | cut -c 11-49 | tr -d ' '
xxd -b [file]
